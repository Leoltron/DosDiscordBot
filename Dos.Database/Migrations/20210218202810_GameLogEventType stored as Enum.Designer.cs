// <auto-generated />
using System;
using System.Collections.Generic;
using Dos.Database;
using Dos.Database.Models;
using Dos.Game.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Dos.Database.Migrations
{
    [DbContext(typeof(DosDbContext))]
    [Migration("20210218202810_GameLogEventType stored as Enum")]
    partial class GameLogEventTypestoredasEnum
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:Enum:game_log_event_type", "player_received_card,center_row_match,center_row_add,center_row_player_add,clear_center_row,player_turn_start,player_go_out,players_swapped_hands")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Dos.Database.Models.GuildConfig", b =>
                {
                    b.Property<int>("GuildConfigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<BotGameConfig>("Config")
                        .HasColumnType("jsonb");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("GuildConfigId");

                    b.HasIndex("GuildId")
                        .IsUnique();

                    b.ToTable("GuildConfig");
                });

            modelBuilder.Entity("Dos.Database.Models.Replay", b =>
                {
                    b.Property<Guid>("ReplayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ChannelTitle")
                        .HasColumnType("text");

                    b.Property<DateTime>("GameStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("GuildTitle")
                        .HasColumnType("text");

                    b.Property<bool>("IsOngoing")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.HasKey("ReplayId");

                    b.HasIndex("GameStartDate");

                    b.ToTable("Replay");
                });

            modelBuilder.Entity("Dos.Database.Models.ReplayMove", b =>
                {
                    b.Property<int>("ReplayMoveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<Card[]>("Cards")
                        .HasColumnType("jsonb");

                    b.Property<int>("EventType")
                        .HasColumnType("integer");

                    b.Property<Guid>("ReplayId")
                        .HasColumnType("uuid");

                    b.Property<int?>("SourcePlayer")
                        .HasColumnType("integer");

                    b.Property<int?>("TargetPlayer")
                        .HasColumnType("integer");

                    b.HasKey("ReplayMoveId");

                    b.HasIndex("ReplayId");

                    b.ToTable("ReplayMove");
                });

            modelBuilder.Entity("Dos.Database.Models.ReplayPlayer", b =>
                {
                    b.Property<int>("ReplayPlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<string>("PlayerName")
                        .HasColumnType("text");

                    b.Property<Guid>("ReplayId")
                        .HasColumnType("uuid");

                    b.HasKey("ReplayPlayerId");

                    b.HasIndex("ReplayId");

                    b.ToTable("ReplayPlayer");
                });

            modelBuilder.Entity("Dos.Database.Models.ReplaySnapshot", b =>
                {
                    b.Property<int>("ReplaySnapshotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<Card[][]>("CenterRow")
                        .HasColumnType("jsonb");

                    b.Property<int?>("CurrentPlayerId")
                        .HasColumnType("integer");

                    b.Property<Dictionary<int, Card[]>>("PlayerHands")
                        .HasColumnType("jsonb");

                    b.Property<Guid>("ReplayId")
                        .HasColumnType("uuid");

                    b.HasKey("ReplaySnapshotId");

                    b.HasIndex("ReplayId");

                    b.ToTable("ReplaySnapshot");
                });

            modelBuilder.Entity("Dos.Database.Models.ReplayMove", b =>
                {
                    b.HasOne("Dos.Database.Models.Replay", "Replay")
                        .WithMany("Moves")
                        .HasForeignKey("ReplayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dos.Database.Models.ReplayPlayer", b =>
                {
                    b.HasOne("Dos.Database.Models.Replay", "Replay")
                        .WithMany("Players")
                        .HasForeignKey("ReplayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dos.Database.Models.ReplaySnapshot", b =>
                {
                    b.HasOne("Dos.Database.Models.Replay", "Replay")
                        .WithMany("Snapshots")
                        .HasForeignKey("ReplayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
